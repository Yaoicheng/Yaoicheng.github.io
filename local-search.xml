<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>单链表基本操作的实现</title>
    <link href="/2024/08/23/%E5%8D%95%E9%93%BE%E8%A1%A8%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C%E7%9A%84%E5%AE%9E%E7%8E%B0/"/>
    <url>/2024/08/23/%E5%8D%95%E9%93%BE%E8%A1%A8%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C%E7%9A%84%E5%AE%9E%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<blockquote><p>工具：<a href="https://algorithm-visualizer.org/"><em>数据结构可视化网站</em></a></p></blockquote><h3 id="单链表的存储结构"><a href="#单链表的存储结构" class="headerlink" title="单链表的存储结构"></a>单链表的存储结构</h3><p><strong>代码实现</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">Node</span> &#123;<br>    <span class="hljs-type">int</span> data;                   <span class="hljs-comment">// 结点的数据域</span><br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">Node</span> *next;          <span class="hljs-comment">// 结点的指针域</span><br>&#125; Node, *List;                  <span class="hljs-comment">// List为指向结构体Node的指针类型</span><br></code></pre></td></tr></table></figure><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><p><strong>算法步骤</strong></p><ol><li>生成新结点作为头结点，用头指针指向头结点。</li><li>头结点的指针域置空。</li></ol><p><strong>代码实现</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">List <span class="hljs-title">InitList</span><span class="hljs-params">()</span> </span>&#123;<br>    List L = (Node *)<span class="hljs-built_in">malloc</span>(<span class="hljs-built_in">sizeof</span>(Node));      <span class="hljs-comment">// 生成新结点作为头结点，用头指针L指向头结点</span><br>    L-&gt;next = <span class="hljs-literal">NULL</span>;                            <span class="hljs-comment">// 头结点的指针域置空</span><br>    <span class="hljs-keyword">return</span> L;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="按位序取值"><a href="#按位序取值" class="headerlink" title="按位序取值"></a>按位序取值</h3><p><strong>算法步骤</strong></p><ol><li>用指针p指向首元结点，用j做计数器初值赋为1。</li><li>从首元结点开始依次顺着链域next向下访问，只要指向当前结点的指针p不为空（NULL），并且没有到达序号为i（i为传入的位序）的结点，则循环执行以下操作：<ul><li>p指向下一个结点；</li><li>计数器j相应+1。</li></ul></li><li>退出循环时，如果指针p为空，或者计数器j大于i，说明指定的序号i值不合法（i大于表长n或i小于等于0），取值失败；否则取值成功，此时j&#x3D;i时，p所指的结点就是要找的第i个结点，返回p所指结点的数据域。</li></ol><p><strong>代码实现</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">GetElem</span><span class="hljs-params">(List L, <span class="hljs-type">int</span> i)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (i &lt;= <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    Node *p = L-&gt;next;          <span class="hljs-comment">// 初始化，p指向首元结点</span><br>    <span class="hljs-type">int</span> j = <span class="hljs-number">1</span>;                  <span class="hljs-comment">// 计数器j初值赋为1</span><br>    <span class="hljs-keyword">while</span> (p != <span class="hljs-literal">NULL</span> &amp;&amp; j &lt; i) &#123;<br>        p = p-&gt;next;<br>        j++;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (p == <span class="hljs-literal">NULL</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;   <span class="hljs-comment">// 如果循环结束时当前节点为NULL，说明索引超出链表长度</span><br>    <span class="hljs-keyword">return</span> p-&gt;data;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="按数据域查找"><a href="#按数据域查找" class="headerlink" title="按数据域查找"></a>按数据域查找</h3><p><strong>算法步骤</strong><br>类似按位序取值</p><p><strong>代码实现</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">Node *<span class="hljs-title">FindElem</span><span class="hljs-params">(List L, <span class="hljs-type">int</span> n)</span> </span>&#123;<br>    Node *p = L-&gt;next;<br>    <span class="hljs-keyword">while</span> (p != <span class="hljs-literal">NULL</span> &amp;&amp; p-&gt;data != n)<br>        p = p-&gt;next;<br>    <span class="hljs-keyword">return</span> p;                   <span class="hljs-comment">// 查找成功返回值为n的结点地址p，查找失败p为NULL</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="指定位置插入"><a href="#指定位置插入" class="headerlink" title="指定位置插入"></a>指定位置插入</h3><p><strong>算法步骤</strong></p><ol><li>查找结点a<sub>i-1</sub>并由指针p指向该结点。</li><li>生成一个新节点*s。</li><li>将新结点的数据域置为n。</li><li>将新结点的指针域指向结点a<sub>i</sub>。</li><li>将结点*p的指针域指向*s。</li></ol><p><strong>代码实现</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Insert</span><span class="hljs-params">(List L, <span class="hljs-type">int</span> i, <span class="hljs-type">int</span> data)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (i &lt;= <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span>;<br>    Node *p = L;<br>    <span class="hljs-type">int</span> j = <span class="hljs-number">0</span>;                  <span class="hljs-comment">// 插入位置可能为1，j初值赋为0</span><br>    <span class="hljs-keyword">while</span> (p != <span class="hljs-literal">NULL</span> &amp;&amp; j &lt; i<span class="hljs-number">-1</span>) &#123;  <span class="hljs-comment">// 找到插入位置的前驱</span><br>        p = p-&gt;next;<br>        j++;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (p == <span class="hljs-literal">NULL</span>) <span class="hljs-keyword">return</span>;<br>    Node *s = (Node *)<span class="hljs-built_in">malloc</span>(<span class="hljs-built_in">sizeof</span>(Node));<br>    s-&gt;data = data;<br>    s-&gt;next = p-&gt;next;          <span class="hljs-comment">// 注意语句的先后顺序</span><br>    p-&gt;next = s;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="指定位置删除"><a href="#指定位置删除" class="headerlink" title="指定位置删除"></a>指定位置删除</h3><p><strong>算法步骤</strong><br>类似指定位置插入</p><p><strong>代码实现</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">DelElem</span><span class="hljs-params">(List L, <span class="hljs-type">int</span> i)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (i &lt;= <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span>;<br>    Node *p = L;<br>    <span class="hljs-type">int</span> j = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (p-&gt;next != <span class="hljs-literal">NULL</span> &amp;&amp; j &lt; i<span class="hljs-number">-1</span>) &#123;    <span class="hljs-comment">// 找到删除位置的前驱</span><br>        p = p-&gt;next;<br>        j++;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (p-&gt;next == <span class="hljs-literal">NULL</span>) <span class="hljs-keyword">return</span>;<br>    Node *pr = p-&gt;next;<br>    p-&gt;next = pr-&gt;next;<br>    <span class="hljs-built_in">free</span>(pr);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="创建单链表"><a href="#创建单链表" class="headerlink" title="创建单链表"></a>创建单链表</h3><h5 id="前插法"><a href="#前插法" class="headerlink" title="前插法"></a>前插法</h5><p><strong>算法步骤</strong></p><ol><li>创建一个只有头结点的空链表。</li><li>根据待创建链表包括的元素个数m&#x3D;n，循环n次执行以下操作：<ul><li>生成一个新结点*p；</li><li>输入元素值赋给新结点*p的数据域；</li><li>将新结点*p插入到头结点之后。</li></ul></li></ol><p><strong>代码实现</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">List <span class="hljs-title">CreatList_H</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> </span>&#123;<br>    <span class="hljs-comment">// 逆位序输入n个元素的值，建立带表头结点的单链表L</span><br>    List L = <span class="hljs-built_in">InitList</span>();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>        Node *p = (Node *)<span class="hljs-built_in">malloc</span>(<span class="hljs-built_in">sizeof</span>(Node));<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;p-&gt;data);<br>        p-&gt;next = L-&gt;next;<br>        L-&gt;next = p;<br>    &#125;<br>    <span class="hljs-keyword">return</span> L;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="后插法"><a href="#后插法" class="headerlink" title="后插法"></a>后插法</h5><p><strong>算法步骤</strong><br>类似前插法</p><p><strong>代码实现</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">List <span class="hljs-title">CreatList_R</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> </span>&#123;<br>    <span class="hljs-comment">// 正位序输入n个元素的值，建立带表头结点的单链表L</span><br>    List L = <span class="hljs-built_in">InitList</span>();<br>    Node *r = L;                    <span class="hljs-comment">// r指向尾结点</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>        Node *p = (Node *)<span class="hljs-built_in">malloc</span>(<span class="hljs-built_in">sizeof</span>(Node));<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;p-&gt;data);<br>        p-&gt;next = <span class="hljs-literal">NULL</span>;<br>        r-&gt;next = p;<br>        r = p;                      <span class="hljs-comment">// 更新尾结点</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> L;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>数据结构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>data structure</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>markdown速查笔记</title>
    <link href="/2024/08/07/md%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2024/08/07/md%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h2 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h2><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs clean"># A first-level heading<br>## A second-level heading<br>### A third-level heading<br>...<br>###### A sixth-level heading<br></code></pre></td></tr></table></figure><p>使用两个或多个标题时，GitHub 会自动生成一个目录，可以通过单击文件标题中的  来访问该目录。 每个标题都列在目录中，可以单击某个标题导航到所选部分。</p><p><img src="https://docs.github.com/assets/cb-82863/mw-1440/images/help/repository/headings-toc.webp"></p><h2 id="文本样式"><a href="#文本样式" class="headerlink" title="文本样式"></a>文本样式</h2><table><thead><tr><th>Style</th><th>符号</th><th>快捷键</th><th>示例</th></tr></thead><tbody><tr><td>加粗</td><td><code>** **</code> 或 <code>__ __</code></td><td><code>ctrl+B</code></td><td><strong>加粗</strong></td></tr><tr><td>斜体</td><td><code>* *</code> 或 <code>_ _</code></td><td><code>ctrl+I</code></td><td><em>斜体</em></td></tr><tr><td>删除线</td><td><code>~~ ~~</code></td><td></td><td><del>删除线</del></td></tr><tr><td>粗体和嵌入的斜体</td><td><code>** **</code> 和 <code>_ _</code></td><td></td><td><strong>This text is <em>extremely</em> important</strong></td></tr><tr><td>全部粗体和斜体</td><td><code>*** ***</code></td><td></td><td><em><strong>All this text is important</strong></em></td></tr><tr><td>下标</td><td><code>&lt;sub&gt;&lt;/sub&gt;</code></td><td></td><td>This is a <sub>subscript</sub> text</td></tr><tr><td>上标</td><td><code>&lt;sup&gt; &lt;/sup&gt;</code></td><td></td><td>This is a <sup>superscript</sup> text</td></tr></tbody></table><h2 id="引用文本"><a href="#引用文本" class="headerlink" title="引用文本"></a>引用文本</h2><p>可以使用 &gt; 来引用文本。</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">&gt; Text <span class="hljs-keyword">that</span> <span class="hljs-keyword">is</span> a <span class="hljs-literal">quote</span><br></code></pre></td></tr></table></figure><blockquote><p>引用文本缩进，具有不同的类型颜色。</p></blockquote><h2 id="引用代码"><a href="#引用代码" class="headerlink" title="引用代码"></a>引用代码</h2><p>使用单反引号可标注句子中的代码或命令。</p><blockquote><p>反引号中的文本不会被格式化。</p></blockquote><p>你也可以按 <code>Ctrl+E</code> (Windows&#x2F;Linux) 键盘快捷方式将代码块的反引号插入到 Markdown 一行中。</p><p>要将代码或文本格式化为各自的不同块，请使用三反引号。</p><h3 id="隔离代码块"><a href="#隔离代码块" class="headerlink" title="隔离代码块"></a>隔离代码块</h3><blockquote><p>要在列表中保留格式，请确保将非围栏代码块缩进八个空格。<br>要在围栏代码块中显示三重倒引号，请将其包在四个倒引号内。</p></blockquote><h3 id="语法突出显示"><a href="#语法突出显示" class="headerlink" title="语法突出显示"></a>语法突出显示</h3><p>您可以添加可选的语言标识符，以在围栏代码块中启用语法突显。</p><p>语法突出显示功能会更改源代码的颜色和样式，使其更易于阅读。</p><p>例如，要语法突显 Ruby 代码：</p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey">```ruby<br>require &#x27;redcarpet&#x27;<br>markdown = Redcarpet.<span class="hljs-keyword">new</span>(<span class="hljs-string">&quot;Hello World!&quot;</span>)<br>puts markdown.to_html<br>```<br></code></pre></td></tr></table></figure><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-keyword">require</span> <span class="hljs-string">&#x27;redcarpet&#x27;</span><br>markdown = <span class="hljs-title class_">Redcarpet</span>.new(<span class="hljs-string">&quot;Hello World!&quot;</span>)<br>puts markdown.to_html<br></code></pre></td></tr></table></figure><h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><p>通过将链接文本用方括号 <code>[ ]</code> 括起来，然后将 URL 用括号 <code>( )</code> 括起来，可创建内联链接。</p><p><code>This site was built using [GitHub Pages](https://pages.github.com/).</code></p><p>This site was built using <a href="https://pages.github.com/">GitHub Pages</a>.</p><h3 id="章节链接"><a href="#章节链接" class="headerlink" title="章节链接"></a>章节链接</h3><p>你可以直接链接到渲染文件中的某个部分，方法是将鼠标悬停在该部分标题上以显示 。<br><img src="https://docs.github.com/assets/cb-55933/mw-1440/images/help/repository/readme-links.webp"><br>链接文本应位于一行上。 下面的示例将不起作用。</p><h3 id="相对链接"><a href="#相对链接" class="headerlink" title="相对链接"></a>相对链接</h3><p>……</p><h2 id="图像"><a href="#图像" class="headerlink" title="图像"></a>图像</h2><p>通过添加 <code>!</code> 并将 alt 文本用 <code>[ ]</code> 括起来，可显示图像。 替换文字是等效于图像中信息的短文本。 然后将图像的链接用括号 <code>()</code> 括起来。</p><h3 id="指定图像显示的主题"><a href="#指定图像显示的主题" class="headerlink" title="指定图像显示的主题"></a>指定图像显示的主题</h3><p>你可以通过结合使用 HTML <code>&lt;picture&gt;</code> 元素和 <code>prefers-color-scheme</code> 媒体功能来指定在 Markdown 中显示图像的主题。 我们区分浅色和深色模式，因此有两个选项可用。 可以使用这些选项来显示针对深色或浅色背景进行了优化的图像。 这对于透明的 PNG 图像特别有用。</p><blockquote><p>例如，以下代码显示浅色主题的太阳图像和深色主题的月亮：</p></blockquote><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs abnf">&lt;picture&gt;<br>  &lt;source media<span class="hljs-operator">=</span><span class="hljs-string">&quot;(prefers-color-scheme: dark)&quot;</span> srcset<span class="hljs-operator">=</span><span class="hljs-string">&quot;https://user-images.githubusercontent.com/25423296/163456776-7f95b81a-f1ed-45f7-b7ab-8fa810d529fa.png&quot;</span>&gt;<br>  &lt;source media<span class="hljs-operator">=</span><span class="hljs-string">&quot;(prefers-color-scheme: light)&quot;</span> srcset<span class="hljs-operator">=</span><span class="hljs-string">&quot;https://user-images.githubusercontent.com/25423296/163456779-a8556205-d0a5-45e2-ac17-42d089e3c3f8.png&quot;</span>&gt;<br>  &lt;img alt<span class="hljs-operator">=</span><span class="hljs-string">&quot;Shows an illustrated sun in light mode and a moon with stars in dark mode.&quot;</span> src<span class="hljs-operator">=</span><span class="hljs-string">&quot;https://user-images.githubusercontent.com/25423296/163456779-a8556205-d0a5-45e2-ac17-42d089e3c3f8.png&quot;</span>&gt;<br>&lt;/picture&gt;<br></code></pre></td></tr></table></figure><picture>  <source media="(prefers-color-scheme: dark)" srcset="https://user-images.githubusercontent.com/25423296/163456776-7f95b81a-f1ed-45f7-b7ab-8fa810d529fa.png">  <source media="(prefers-color-scheme: light)" srcset="https://user-images.githubusercontent.com/25423296/163456779-a8556205-d0a5-45e2-ac17-42d089e3c3f8.png">  <img alt="Shows an illustrated sun in light mode and a moon with stars in dark mode." src="https://user-images.githubusercontent.com/25423296/163456779-a8556205-d0a5-45e2-ac17-42d089e3c3f8.png"></picture><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><p>可通过在一行或多行文本前面加上 <code>-</code>、<code>*</code> 或 <code>+</code> 来创建一个无序列表。</p><p>要对列表排序，请在每行前面添加一个编号。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">1.</span> James Madison<br><span class="hljs-bullet">2.</span> James Monroe<br><span class="hljs-bullet">3.</span> John Quincy Adams<br></code></pre></td></tr></table></figure><h3 id="嵌套链表"><a href="#嵌套链表" class="headerlink" title="嵌套链表"></a>嵌套链表</h3><p>通过在一个列表项下面缩进一个或多个其他列表项，可创建嵌套列表。</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs applescript"><span class="hljs-number">1.</span> First <span class="hljs-built_in">list</span> <span class="hljs-built_in">item</span><br>   - First nested <span class="hljs-built_in">list</span> <span class="hljs-built_in">item</span><br>     - Second nested <span class="hljs-built_in">list</span> <span class="hljs-built_in">item</span><br></code></pre></td></tr></table></figure><ol><li>First list item<ul><li>First nested list item<ul><li>Second nested list item</li></ul></li></ul></li></ol><h2 id="任务列表"><a href="#任务列表" class="headerlink" title="任务列表"></a>任务列表</h2><p>若要创建任务列表，请在列表项前加连字符和空格，后接 <code>[ ]</code>。 要将任务标记为完成，请使用 <code>[x]</code>。</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-tag">-</span> <span class="hljs-selector-attr">[x]</span> <span class="hljs-selector-id">#739</span><br><span class="hljs-selector-tag">-</span> <span class="hljs-selector-attr">[ ]</span> <span class="hljs-selector-tag">https</span>:<span class="hljs-comment">//github.com/octo-org/octo-repo/issues/740</span><br><span class="hljs-selector-tag">-</span> <span class="hljs-selector-attr">[ ]</span> <span class="hljs-selector-tag">Add</span> <span class="hljs-selector-tag">delight</span> <span class="hljs-selector-tag">to</span> <span class="hljs-selector-tag">the</span> <span class="hljs-selector-tag">experience</span> <span class="hljs-keyword">when</span> all tasks are <span class="hljs-attribute">complete </span>:<span class="hljs-attribute">tada</span>:<br></code></pre></td></tr></table></figure><ul><li><input checked="" disabled="" type="checkbox"> #739</li><li><input disabled="" type="checkbox"> <a href="https://github.com/octo-org/octo-repo/issues/740">https://github.com/octo-org/octo-repo/issues/740</a></li><li><input disabled="" type="checkbox"> Add delight to the experience when all tasks are complete :tada:<br>如果任务列表项说明以括号开头，则需要使用 \ 进行转义：</li></ul><h2 id="提及人员和团队"><a href="#提及人员和团队" class="headerlink" title="提及人员和团队"></a>提及人员和团队</h2><p>可以在 GitHub 上提及人员或团队，方法是键入 @ 加上其用户名或团队名称。 这将触发通知并提请他们注意对话。 如果您在编辑的评论中提及某人的用户名或团队名称，该用户也会收到通知。</p><h2 id="使用表情符号"><a href="#使用表情符号" class="headerlink" title="使用表情符号"></a>使用表情符号</h2><p>你可以通过键入 <code>:EMOJICODE</code> :（冒号后跟表情符号的名称）将表情符号添加到写作中。<br>键入 : 将显示建议的表情符号列表。 列表将在你键入时进行筛选，因此一旦找到所需表情符号，请按 Tab 或 Enter 键以填写突出显示的结果 。</p><blockquote><p>有关可用表情符号和代码的完整列表，请参阅 Emoji-Cheat-Sheet。</p></blockquote><h2 id="段落"><a href="#段落" class="headerlink" title="段落"></a>段落</h2><p>通过在文本行之间留一个空白行，可创建新段落。</p><h2 id="脚注"><a href="#脚注" class="headerlink" title="脚注"></a>脚注</h2><p>您可以使用此括号语法为您的内容添加脚注：</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-tag">Here</span> <span class="hljs-selector-tag">is</span> <span class="hljs-selector-tag">a</span> <span class="hljs-selector-tag">simple</span> <span class="hljs-selector-tag">footnote</span><span class="hljs-selector-attr">[^1]</span>.<br><br><span class="hljs-selector-tag">A</span> <span class="hljs-selector-tag">footnote</span> <span class="hljs-selector-tag">can</span> <span class="hljs-selector-tag">also</span> <span class="hljs-selector-tag">have</span> <span class="hljs-selector-tag">multiple</span> <span class="hljs-selector-tag">lines</span><span class="hljs-selector-attr">[^2]</span>.<br><br><span class="hljs-selector-attr">[^1]</span>: <span class="hljs-selector-tag">My</span> <span class="hljs-selector-tag">reference</span>.<br><span class="hljs-selector-attr">[^2]</span>: <span class="hljs-selector-tag">To</span> <span class="hljs-selector-tag">add</span> <span class="hljs-selector-tag">line</span> <span class="hljs-selector-tag">breaks</span> <span class="hljs-selector-tag">within</span> <span class="hljs-selector-tag">a</span> <span class="hljs-selector-tag">footnote</span>, <span class="hljs-selector-tag">prefix</span> <span class="hljs-selector-tag">new</span> <span class="hljs-selector-tag">lines</span> <span class="hljs-selector-tag">with</span> <span class="hljs-number">2</span> <span class="hljs-selector-tag">spaces</span>.<br>  <span class="hljs-selector-tag">This</span> <span class="hljs-selector-tag">is</span> <span class="hljs-selector-tag">a</span> <span class="hljs-selector-tag">second</span> <span class="hljs-selector-tag">line</span>.<br></code></pre></td></tr></table></figure><p>Here is a simple footnote<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="My reference.">[1]</span></a></sup>.</p><p>A footnote can also have multiple lines<sup id="fnref:2" class="footnote-ref"><a href="#fn:2" rel="footnote"><span class="hint--top hint--rounded" aria-label="To add line breaks within a footnote, prefix new lines with 2 spaces.  This is a second line.">[2]</span></a></sup>.</p><p>Wiki 不支持脚注。</p><h2 id="警报"><a href="#警报" class="headerlink" title="警报"></a>警报</h2><p>警报是基于块引用语法的 Markdown 扩展，可用于强调关键信息。 在 GitHub 上，它们以独特的颜色和图标显示，以指示内容的显著性。</p><blockquote><p>只有在对用户成功至关重要时才使用警报，并将每篇文章的警报限制在一到两个，以防止读者负担过重。 此外，应避免连续发出警报。 警报无法嵌套在其他元素中。</p></blockquote><p>要添加警报，请使用指定警报类型的特殊块引用行，然后在标准块引用中添加警报信息。 可以使用以下五种类型的警报：</p><figure class="highlight node-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs node-repl"><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">[!<span class="hljs-variable constant_">NOTE</span>]</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript"><span class="hljs-title class_">Useful</span> information that users should know, even when skimming content.</span><br><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">[!<span class="hljs-variable constant_">TIP</span>]</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript"><span class="hljs-title class_">Helpful</span> advice <span class="hljs-keyword">for</span> doing things better or more easily.</span><br><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">[!<span class="hljs-variable constant_">IMPORTANT</span>]</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript"><span class="hljs-title class_">Key</span> information users need to know to achieve their goal.</span><br><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">[!<span class="hljs-variable constant_">WARNING</span>]</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript"><span class="hljs-title class_">Urgent</span> info that needs immediate user attention to avoid problems.</span><br><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">[!<span class="hljs-variable constant_">CAUTION</span>]</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript"><span class="hljs-title class_">Advises</span> about risks or negative outcomes <span class="hljs-keyword">of</span> certain actions.</span><br></code></pre></td></tr></table></figure><blockquote><p>Useful information that users should know, even when skimming content.</p></blockquote><blockquote><p>[!TIP]<br>Helpful advice for doing things better or more easily.</p></blockquote><blockquote><p>[!IMPORTANT]<br>Key information users need to know to achieve their goal.</p></blockquote><blockquote><p>[!WARNING]<br>Urgent info that needs immediate user attention to avoid problems.</p></blockquote><blockquote><p>[!CAUTION]<br>Advises about risks or negative outcomes of certain actions.</p></blockquote><h2 id="隐藏有评论的内容"><a href="#隐藏有评论的内容" class="headerlink" title="隐藏有评论的内容"></a>隐藏有评论的内容</h2><p>您可以通过在 HTML 评论中加入内容来指示 GitHub 隐藏渲染的 Markdown 中的内容。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- This content will not appear in the rendered Markdown --&gt;</span><br></code></pre></td></tr></table></figure><!-- This content will not appear in the rendered Markdown --><h2 id="忽略-Markdown-格式"><a href="#忽略-Markdown-格式" class="headerlink" title="忽略 Markdown 格式"></a>忽略 Markdown 格式</h2><p>通过在 Markdown 字符前面输入 \，可指示 GitHub 忽略 Markdown 格式（或对其进行转义）。</p><h2 id="使用表格组织信息"><a href="#使用表格组织信息" class="headerlink" title="使用表格组织信息"></a>使用表格组织信息</h2><h3 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h3><p>可以使用竖线 | 和连字符 - 创建表。 连字符用于创建每列的标题，而竖线用于分隔每列。 必须在表格前包含空白链接，以便其正确呈现。</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">|<span class="hljs-string"> First Header  </span>|<span class="hljs-string"> Second Header </span>|<br>|<span class="hljs-string"> ------------- </span>|<span class="hljs-string"> ------------- </span>|<br>|<span class="hljs-string"> Content Cell  </span>|<span class="hljs-string"> Content Cell  </span>|<br>|<span class="hljs-string"> Content Cell  </span>|<span class="hljs-string"> Content Cell  </span>|<br></code></pre></td></tr></table></figure><table><thead><tr><th>First Header</th><th>Second Header</th></tr></thead><tbody><tr><td>Content Cell</td><td>Content Cell</td></tr><tr><td>Content Cell</td><td>Content Cell</td></tr><tr><td>表格末尾的竖线可选。</td><td></td></tr></tbody></table><p>单元格的宽度可以不同，无需在列内准确对齐。 标题行的第一列中必须至少有三个横线。</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">|<span class="hljs-string"> Command </span>|<span class="hljs-string"> Description </span>|<br>|<span class="hljs-string"> --- </span>|<span class="hljs-string"> --- </span>|<br>|<span class="hljs-string"> git status </span>|<span class="hljs-string"> List all new or modified files </span>|<br>|<span class="hljs-string"> git diff </span>|<span class="hljs-string"> Show file differences that haven&#x27;t been staged </span>|<br></code></pre></td></tr></table></figure><table><thead><tr><th>Command</th><th>Description</th></tr></thead><tbody><tr><td>git status</td><td>List all new or modified files</td></tr><tr><td>git diff</td><td>Show file differences that haven’t been staged</td></tr></tbody></table><h3 id="格式化表格中的内容"><a href="#格式化表格中的内容" class="headerlink" title="格式化表格中的内容"></a>格式化表格中的内容</h3><p>可以在表格中使用格式，例如链接、内联代码块和文本样式：</p><p>可以通过在标题行中连字符的左侧、右侧或两侧添加*<strong>冒号</strong> :，来靠左、靠右或居中对齐列中的文本。</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">|<span class="hljs-string"> Left-aligned </span>|<span class="hljs-string"> Center-aligned </span>|<span class="hljs-string"> Right-aligned </span>|<br>|<span class="hljs-string"> :---         </span>|<span class="hljs-string">     :---:      </span>|<span class="hljs-string">          ---: </span>|<br>|<span class="hljs-string"> git status   </span>|<span class="hljs-string"> git status     </span>|<span class="hljs-string"> git status    </span>|<br>|<span class="hljs-string"> git diff     </span>|<span class="hljs-string"> git diff       </span>|<span class="hljs-string"> git diff      </span>|<br></code></pre></td></tr></table></figure><table><thead><tr><th align="left">Left-aligned</th><th align="center">Center-aligned</th><th align="right">Right-aligned</th></tr></thead><tbody><tr><td align="left">git status</td><td align="center">git status</td><td align="right">git status</td></tr><tr><td align="left">git diff</td><td align="center">git diff</td><td align="right">git diff</td></tr></tbody></table><h2 id="使用折叠部分组织信息"><a href="#使用折叠部分组织信息" class="headerlink" title="使用折叠部分组织信息"></a>使用折叠部分组织信息</h2><h3 id="创建折叠部分"><a href="#创建折叠部分" class="headerlink" title="创建折叠部分"></a>创建折叠部分</h3><p>可以通过创建读者可以选择展开的折叠部分来暂时隐藏 Markdown 的分区。</p><p><code>&lt;details&gt;</code> 块中的任何 Markdown 都将被折叠，直到读者单击  展开详细信息。</p><p>在 <code>&lt;details&gt;</code> 块中，使用 <code>&lt;summary&gt;</code> 标记让读者知道里面的内容。 标签显示在  的右侧。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs css">&lt;<span class="hljs-selector-tag">details</span>&gt;<br><br>&lt;<span class="hljs-selector-tag">summary</span>&gt;Tips for collapsed sections&lt;/<span class="hljs-selector-tag">summary</span>&gt;<br><br>### You can add <span class="hljs-selector-tag">a</span> <span class="hljs-selector-tag">header</span><br><br>You can add <span class="hljs-selector-tag">text</span> within <span class="hljs-selector-tag">a</span> collapsed <span class="hljs-selector-tag">section</span>. <br><br>You can add an <span class="hljs-selector-tag">image</span> or <span class="hljs-selector-tag">a</span> <span class="hljs-selector-tag">code</span> block, too.<br><br>```ruby<br>   puts &quot;Hello World&quot;<br></code></pre></td></tr></table></figure></details><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs css">&lt;<span class="hljs-selector-tag">details</span>&gt;<br><br>&lt;<span class="hljs-selector-tag">summary</span>&gt;Tips for collapsed sections&lt;/<span class="hljs-selector-tag">summary</span>&gt;<br><br>### You can add <span class="hljs-selector-tag">a</span> <span class="hljs-selector-tag">header</span><br><br>You can add <span class="hljs-selector-tag">text</span> within <span class="hljs-selector-tag">a</span> collapsed <span class="hljs-selector-tag">section</span>. <br><br>You can add an <span class="hljs-selector-tag">image</span> or <span class="hljs-selector-tag">a</span> <span class="hljs-selector-tag">code</span> block, too.<br><br>```ruby<br>   puts &quot;Hello World&quot;<br></code></pre></td></tr></table></figure></details><h2 id="创建关系图"><a href="#创建关系图" class="headerlink" title="创建关系图"></a>创建关系图</h2><h3 id="关于创建关系图"><a href="#关于创建关系图" class="headerlink" title="关于创建关系图"></a>关于创建关系图</h3><p>可以使用以下三种不同的语法在 Markdown 中创建关系图：mermaid、geoJSON 和 topoJSON、ASCII STL。 关系图可在以下项中呈现：GitHub Issues、GitHub Discussions、拉取请求、Wiki 和 Markdown 文件。</p><h3 id="创建-Mermaid-关系图"><a href="#创建-Mermaid-关系图" class="headerlink" title="创建 Mermaid 关系图"></a>创建 Mermaid 关系图</h3><p>Mermaid 是一款受 Markdown 启发的工具，可将文本呈现为关系图。 例如，Mermaid 可以呈现流程图、序列图、饼图等。 </p><p>例如，可以通过指定值和箭头来创建流程图。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs css">Here is <span class="hljs-selector-tag">a</span> simple <span class="hljs-attribute">flow</span> chart:<br><br>```mermaid<br>graph TD;<br>    <span class="hljs-selector-tag">A</span>--&gt;<span class="hljs-selector-tag">B</span>;<br>    <span class="hljs-selector-tag">A</span>--&gt;C;<br>    <span class="hljs-selector-tag">B</span>--&gt;D;<br>    C--&gt;D;<br>```<br></code></pre></td></tr></table></figure><h2 id="编写数学表达式"><a href="#编写数学表达式" class="headerlink" title="编写数学表达式"></a>编写数学表达式</h2><p>……<section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span>My reference. ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span>To add line breaks within a footnote, prefix new lines with 2 spaces.  This is a second line.<br><a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section></p>]]></content>
    
    
    <categories>
      
      <category>语言学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>language</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
